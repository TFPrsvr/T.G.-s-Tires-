# Production Docker Compose with security hardening
version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: tgs-tires-app
    restart: unless-stopped

    # Security: Non-root user and read-only filesystem
    user: "1001:1001"
    read_only: true

    # Security: Limit resources to prevent DoS
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Security: Drop all capabilities except needed ones
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID

    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true

    # Environment variables (use secrets in production)
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_TELEMETRY_DISABLED=1

    # Network configuration
    ports:
      - "3000:3000"
    networks:
      - tgs-network

    # Temporary volumes for writable directories
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/.next/cache:noexec,nosuid,size=100m

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Dependencies
    depends_on:
      - redis
      - postgres

  # Redis for caching and sessions
  redis:
    image: redis:7.2-alpine
    container_name: tgs-redis
    restart: unless-stopped

    # Security configurations
    user: "999:999"
    read_only: true

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

    # Security options
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

    # Redis configuration
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123}

    # Persistent storage
    volumes:
      - redis_data:/data

    # Network
    networks:
      - tgs-network

    # Temporary filesystem
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL database (for production use)
  postgres:
    image: postgres:15.5-alpine
    container_name: tgs-postgres
    restart: unless-stopped

    # Security
    user: "70:70"
    read_only: true

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

    # Security options
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true

    # Environment variables
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-tgstires}
      - POSTGRES_USER=${DATABASE_USER:-tgsadmin}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-changeme123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    # Persistent storage
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro

    # Network
    networks:
      - tgs-network

    # Temporary filesystem
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/run/postgresql:noexec,nosuid,size=10m

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-tgsadmin} -d ${DATABASE_NAME:-tgstires}"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: tgs-nginx
    restart: unless-stopped

    # Security
    user: "101:101"
    read_only: true

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

    # Security options
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true

    # Port mapping
    ports:
      - "80:80"
      - "443:443"

    # Configuration files
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx

    # Network
    networks:
      - tgs-network

    # Temporary filesystem
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

    # Dependencies
    depends_on:
      - app

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/tgs_postgres_data/_data

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/tgs_redis_data/_data

  nginx_cache:
    driver: local

  nginx_logs:
    driver: local

# Secure network configuration
networks:
  tgs-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: tgs-bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    # Security: Enable user-defined bridge network isolation
    internal: false